{"version":3,"sources":["project.ts","dragAndDrop.ts","util.ts","images.ts","import.ts","lzma.ts","components/Alert.tsx","components/AssetPreview.tsx","components/Button.tsx","components/AssetList.tsx","components/Dropdown.tsx","components/AssetDetails.tsx","components/AssetSidebar.tsx","export.ts","components/AssetActions.tsx","components/AssetTabBar.tsx","components/TopBar.tsx","App.tsx","index.tsx"],"names":["project","fileReadAsBufferAsync","f","Promise","resolve","reject","reader","FileReader","onerror","ev","onload","Uint8Array","result","readAsArrayBuffer","projectPalette","AssetType","getTilemapProject","newTilemapProject","empty","pxt","TilemapProject","saved","window","localStorage","getItem","blob","JSON","parse","loadAssetsJRes","images","loadTilemapJRes","tilemaps","getProjectPalette","slice","browserDownloadUInt8Array","buf","name","contentType","userContextWindow","onError","browserDownloadBase64","btoa","uint8ArrayToString","browserDownloadDataUri","uri","navigator","test","userAgent","ia","stringToUint8Array","atob","split","Blob","type","msSaveOrOpenBlob","link","document","createElement","download","href","body","appendChild","click","removeChild","location","b64","saveBlob","dataurl","toDownloadDataUri","b","e","protocol","input","len","length","res","i","charCodeAt","String","fromCharCode","ImageConverter","palette","start","this","d","Date","now","debug","jresURL","data","indexOf","magic","w","h","arrs","map","hexColor","v","parseInt","replace","genMonochrome","scaleFactor","BrowserUtils","isEdge","isIE","genColor","outByteW","bmpHeaderSize","bmpSize","bmp","HF2","write32","write16","set","inP","outP","mask","x","y","U","width","height","intScale","Math","max","isTransparent","high","columnStart","colorStart","generatePreviewURI","asset","imgConv","previewURI","convert","jresData","tilemap","tilemapToImageURI","anim","frames","framePreviewURIs","bitmap","sprite","base64EncodeBitmap","sideLength","lightMode","colors","canvas","context","cellSize","min","xOffset","floor","yOffset","getContext","alpha","fillStyle","fillRect","tileColors","c","r","tile","get","tileInfo","tileset","tiles","computeAverageColor","Bitmap","fromData","toDataURL","getImageFromURIAsync","a","loadImageAsync","loaded","ctx","drawImage","getImageData","pixels","el","src","getImageLiteralFromUint8Array","encoded","imageInfo","imgEncodeImage","image","colorsToNumbers","getPix","row","push","n","toString","join","imgEncodeImgCore","index","closestColor","color","parseColorString","_r","_g","_b","scale","pix","mindelta","idx","delta","substr","backendEndpoint","importScriptAsync","url","scriptID","trim","lastIndexOf","httpGetJSONAsync","loadImagesFromProject","filesystem","config","parsedConfig","Array","isArray","Object","keys","file","endsWith","jres","grabImagesFromTypeScript","fileText","match","imageLiteralToBitmap","createNewProjectImage","lf","getDefaultAssetDisplayName","request","XMLHttpRequest","addEventListener","err","responseText","open","send","lzmaDecompressAsync","lzma","LZMA","decompress","error","Alert","props","importInputRef","dragInit","handleImportInputRef","onImportDragEnter","setState","dragging","onImportDragLeave","handleDropRef","filter","dragged","files","ext","toLowerCase","literal","onClose","text","source","clipboardData","item","stopPropagation","preventDefault","items","getAsFile","dataTransfer","types","found","dropEffect","state","evt","visible","title","icon","options","className","onClick","onAlertClick","ref","onDragEnter","onDragLeave","placeholder","key","value","style","React","Component","AssetPreview","selected","useState","revision","setRevision","addChangeListener","onAssetChange","removeChangeListener","updated","lookupAsset","id","Button","label","AssetList","activeTab","onAssetSelected","assets","getAssets","sort","compareInternalId","pluralized","debouncedSave","Util","debounce","getProjectAssetsJRes","getProjectTilesetJRes","setItem","stringify","saveProject","addProjectChangeListener","revisionListener","removeProjectChangeListener","internalID","kind","createNewImage","createNewTile","createNewAnimation","createNewTilemap","meta","displayName","updateAsset","createEmptyAsset","Dropdown","selectedId","onItemSelected","isOpen","setIsOpen","find","tileDropdownOptions","AssetDetails","showAlert","showTileSizeDropdown","size","currentAsset","tileSize","showWarning","isEmptyBitmap","layers","isEmptyTilemap","backgroundColor","changeTileSize","getTileWidth","dup","duplicateAsset","removeAsset","tileWidth","oldBitmap","newBitmap","apply","newTilemap","Tilemap","newLayers","newData","TilemapData","getTransparency","AssetSidebar","createProjectBlobAsync","tmjres","stringRes","ts","emitTilemapsFromJRes","imgjres","emitProjectImages","out","cloudId","targetVersions","editor","compress","lzmaCompressAsync","allBitmaps","frame","renderCanvas","output","pixel","clearRect","AssetActions","onDeleteButtonClick","onImportButtonClick","downloadProjectAsync","setTimeout","downloadScaledSprites","onExportButtonClick","AssetTabBar","onTabSelected","TopBar","App","iframe","postMessage","contentWindow","onMouseEnter","focus","alertProps","alert","tab","getAssetForTab","openCurrentAsset","hideAlert","undefined","handleIframeRef","mostRecentAssets","msg","onAssetSave","resolveTile","some","t","tm","oldData","newTm","editedTiles","deletedTiles","existing","updateTilemapReferencesFromResult","mostRecent","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.723889e4.chunk.js","sourcesContent":["/// <reference path=\"../node_modules/pxt-core/built/pxtlib.d.ts\" />\n\nlet project: pxt.TilemapProject;\nlet projectPalette = [\n    \"#000000\",\n    \"#ffffff\",\n    \"#ff2121\",\n    \"#ff93c4\",\n    \"#ff8135\",\n    \"#fff609\",\n    \"#249ca3\",\n    \"#78dc52\",\n    \"#003fad\",\n    \"#87f2ff\",\n    \"#8e2ec4\",\n    \"#a4839f\",\n    \"#5c406c\",\n    \"#e5cdc4\",\n    \"#91463d\",\n    \"#000000\"\n];\n\nconst STORAGE_KEY = \"tilemap-project\";\n\nexport const AssetType = {\n    Image: \"image\" as pxt.AssetType,\n    Tile: \"tile\" as pxt.AssetType,\n    Tilemap: \"tilemap\" as pxt.AssetType,\n    Animation: \"animation\" as pxt.AssetType\n}\nexport function getTilemapProject() {\n    if (!project) newTilemapProject();\n    return project;\n}\n\nexport function newTilemapProject(empty = false) {\n    project = new pxt.TilemapProject();\n    projectPalette = [\n        \"#000000\",\n        \"#ffffff\",\n        \"#ff2121\",\n        \"#ff93c4\",\n        \"#ff8135\",\n        \"#fff609\",\n        \"#249ca3\",\n        \"#78dc52\",\n        \"#003fad\",\n        \"#87f2ff\",\n        \"#8e2ec4\",\n        \"#a4839f\",\n        \"#5c406c\",\n        \"#e5cdc4\",\n        \"#91463d\",\n        \"#000000\"\n    ]\n\n    if (!empty) {\n        const saved = window.localStorage.getItem(STORAGE_KEY);\n        if (saved) {\n            const blob = JSON.parse(saved);\n            project.loadAssetsJRes(blob.images);\n            project.loadTilemapJRes(blob.tilemaps);\n        }\n    }\n\n    return project;\n}\n\nexport function getProjectPalette() {\n    return projectPalette.slice();\n}\n\nexport function saveProject() {\n    if (project) {\n        const saveBlob = {\n            images: project.getProjectAssetsJRes(),\n            tilemaps : project.getProjectTilesetJRes()\n        }\n\n        window.localStorage.setItem(STORAGE_KEY, JSON.stringify(saveBlob));\n    }\n}\n","export function setupDragAndDrop(r: HTMLElement, filter: (file: File) => boolean, dragged: (files: File[]) => void) {\n    r.addEventListener('paste', function (e: ClipboardEvent) {\n        if (e.clipboardData) {\n            // has file?\n            let files: File[] = [];\n            for (let i = 0; i < e.clipboardData.files.length; i++) {\n                if (e.clipboardData.files.item(i)) files.push(e.clipboardData.files.item(i) as File);\n            }\n            files = files.filter(filter);\n            if (files.length > 0) {\n                e.stopPropagation(); // Stops some browsers from redirecting.\n                e.preventDefault();\n                dragged(files);\n            }\n            // has item?\n            else if (e.clipboardData.items && e.clipboardData.items.length > 0) {\n                let f = e.clipboardData.items[0].getAsFile()\n                if (f) {\n                    e.stopPropagation(); // Stops some browsers from redirecting.\n                    e.preventDefault();\n                    dragged([f])\n                }\n            }\n        }\n    })\n    r.addEventListener('dragover', function (e: DragEvent) {\n        if (e.dataTransfer) {\n            let types = e.dataTransfer.types;\n            let found = false;\n            for (let i = 0; i < types.length; ++i)\n                if (types[i] === \"Files\")\n                    found = true;\n            if (found) {\n                if (e.preventDefault) e.preventDefault(); // Necessary. Allows us to drop.\n                e.dataTransfer.dropEffect = 'copy';  // See the section on the DataTransfer object.\n                return false;\n            }\n        }\n        return true;\n    }, false);\n    r.addEventListener('drop', function (e: DragEvent) {\n        if (e.dataTransfer) {\n            const files: File[] = [];\n            for (let i = 0; i < e.dataTransfer.files.length; i++) {\n                if (e.dataTransfer.files.item(i)) files.push(e.dataTransfer.files.item(i) as File);\n            }\n            if (files.length > 0) {\n                e.stopPropagation(); // Stops some browsers from redirecting.\n                e.preventDefault();\n                dragged(files);\n            }\n        }\n        return false;\n    }, false);\n    r.addEventListener('dragend', function (e: DragEvent) {\n        return false;\n    }, false);\n}\n\nexport function fileReadAsBufferAsync(f: File): Promise<Uint8Array | null> { // ArrayBuffer\n    if (!f)\n        return Promise.resolve<Uint8Array | null>(null);\n    else {\n        return new Promise<Uint8Array | null>((resolve, reject) => {\n            let reader = new FileReader();\n            reader.onerror = (ev) => resolve(null);\n            reader.onload = (ev) => resolve(new Uint8Array(reader.result as ArrayBuffer));\n            reader.readAsArrayBuffer(f);\n        });\n    }\n}\n\nexport function fileReadAsTextAsync(f: File): Promise<string | null> {\n    if (!f)\n        return Promise.resolve<string| null>(null);\n    else {\n        return new Promise<string | null>((resolve, reject) => {\n            let reader = new FileReader();\n            reader.onerror = (ev) => resolve(null);\n            reader.onload = (ev) => resolve(reader.result as string);\n            reader.readAsText(f);\n        });\n    }\n}\n","/**\n * This file contains util functions taken directly from pxt-core and lightly modified\n */\n\nimport { AssetType, getProjectPalette } from \"./project\";\n\nexport const IMAGE_MIME_TYPE = \"image/x-mkcd-f4\"\n\nexport function browserDownloadUInt8Array(buf: Uint8Array, name: string, contentType: string = \"application/octet-stream\", userContextWindow?: Window, onError?: (err: any) => void): string {\n    return browserDownloadBase64(btoa(uint8ArrayToString(buf)), name, contentType, userContextWindow, onError)\n}\n\nexport function browserDownloadText(text: string, filename: string) {\n    const encoded = btoa(text);\n    browserDownloadDataUri(toDownloadDataUri(encoded, \"text/plain\"), filename)\n}\n\nexport function isEdge(): boolean {\n    return !!navigator && /Edge/i.test(navigator.userAgent);\n}\n\nexport function isIE(): boolean {\n    return !!navigator && /Trident/i.test(navigator.userAgent);\n}\n\nexport function browserDownloadDataUri(uri: string, name: string) {\n    if (isEdge() || isIE()) {\n        //Fix for edge\n        let byteString = atob(uri.split(',')[1]);\n        let ia = stringToUint8Array(byteString);\n        let blob = new Blob([ia], { type: \"img/png\" });\n        window.navigator.msSaveOrOpenBlob(blob, name);\n    } else {\n        let link = <any>window.document.createElement('a');\n        if (typeof link.download == \"string\") {\n            link.href = uri;\n            link.download = name;\n            document.body.appendChild(link); // for FF\n            link.click();\n            document.body.removeChild(link);\n        } else {\n            document.location.href = uri;\n        }\n    }\n}\n\nexport function browserDownloadBase64(b64: string, name: string, contentType: string = \"application/octet-stream\", userContextWindow?: Window, onError?: (err: any) => void): string {\n    const saveBlob = (<any>window).navigator.msSaveOrOpenBlob;\n    const dataurl = toDownloadDataUri(b64, name);\n    try {\n        if (saveBlob) {\n            const b = new Blob([stringToUint8Array(atob(b64))], { type: contentType })\n            const result = (<any>window).navigator.msSaveOrOpenBlob(b, name);\n        } else browserDownloadDataUri(dataurl, name);\n    } catch (e) {\n        if (onError) onError(e);\n    }\n    return dataurl;\n}\n\nexport function toDownloadDataUri(b64: string, contentType: string): string {\n    let protocol = \"data\";\n    const dataurl = protocol + \":\" + contentType + \";base64,\" + b64\n    return dataurl;\n}\n\n// this will take lower 8 bits from each character\nexport function stringToUint8Array(input: string) {\n    let len = input.length;\n    let res = new Uint8Array(len)\n    for (let i = 0; i < len; ++i)\n        res[i] = input.charCodeAt(i) & 0xff;\n    return res;\n}\n\nexport function hexToUint8Array(hex: string) {\n    let r = new Uint8ClampedArray(hex.length >> 1);\n    for (let i = 0; i < hex.length; i += 2)\n        r[i >> 1] = parseInt(hex.slice(i, i + 2), 16)\n    return r\n}\n\nexport function uint8ArrayToString(input: ArrayLike<number>) {\n    let len = input.length;\n    let res = \"\"\n    for (let i = 0; i < len; ++i)\n        res += String.fromCharCode(input[i]);\n    return res;\n}\n\n\nconst unicodeES5IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];\nconst unicodeES5IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,];\nconst reservedWords = [\"abstract\", \"any\", \"as\", \"break\",\n    \"case\", \"catch\", \"class\", \"continue\", \"const\", \"constructor\", \"debugger\",\n    \"declare\", \"default\", \"delete\", \"do\", \"else\", \"enum\", \"export\", \"extends\",\n    \"false\", \"finally\", \"for\", \"from\", \"function\", \"get\", \"if\", \"implements\",\n    \"import\", \"in\", \"instanceof\", \"interface\", \"is\", \"let\", \"module\", \"namespace\",\n    \"new\", \"null\", \"package\", \"private\", \"protected\", \"public\",\n    \"require\", \"global\", \"return\", \"set\", \"static\", \"super\", \"switch\",\n    \"symbol\", \"this\", \"throw\", \"true\", \"try\", \"type\", \"typeof\", \"var\", \"void\",\n    \"while\", \"with\", \"yield\", \"async\", \"await\", \"of\", \"Math\"];\n\n\nexport function escapeIdentifier(name: string): string {\n    if (!name) return '_';\n\n    let n = name.trim().replace(/\\s+/g, \"_\").replace(/[^a-zA-Z0-9_$]/g, a =>\n        isIdentifierPart(a.charCodeAt(0)) ? a : \"\");\n\n    if (n.length === 0 || reservedWords.indexOf(n) !== -1 || !isIdentifierStart(n.charAt(0))) {\n        n = \"_\" + n;\n    }\n\n    return n;\n}\n\nfunction isIdentifierPart(charCode: number) {\n    return lookupInUnicodeMap(charCode, unicodeES5IdentifierPart);\n}\n\nfunction isIdentifierStart(char: string) {\n    if (/[a-zA-Z_$]/.test(char)) return true;\n    return lookupInUnicodeMap(char.charCodeAt(0), unicodeES5IdentifierStart);\n}\n\nfunction lookupInUnicodeMap(code: number, map: number[]): boolean {\n    // Bail out quickly if it couldn't possibly be in the map.\n    if (code < map[0]) {\n        return false;\n    }\n\n    // Perform binary search in one of the Unicode range maps\n    let lo = 0;\n    let hi: number = map.length;\n    let mid: number;\n\n    while (lo + 1 < hi) {\n        mid = lo + (hi - lo) / 2;\n        // mid has to be even to catch a range's beginning\n        mid -= mid % 2;\n        if (map[mid] <= code && code <= map[mid + 1]) {\n            return true;\n        }\n\n        if (code < map[mid]) {\n            hi = mid;\n        }\n        else {\n            lo = mid + 2;\n        }\n    }\n\n    return false;\n}\nclass ImageConverter {\n    private palette: Uint8Array | null = null\n    private start: number = 0\n\n    logTime() {\n        if (this.start) {\n            let d = Date.now() - this.start\n            pxt.debug(\"Icon creation: \" + d + \"ms\")\n        }\n    }\n\n    convert(jresURL: string): any {\n        if (!this.start)\n            this.start = Date.now()\n\n        let data = atob(jresURL.slice(jresURL.indexOf(\",\") + 1))\n        let magic = data.charCodeAt(0);\n        let w = data.charCodeAt(1);\n        let h = data.charCodeAt(2);\n\n        if (magic === 0x87) {\n            magic = 0xe0 | data.charCodeAt(1);\n            w = data.charCodeAt(2) | (data.charCodeAt(3) << 8);\n            h = data.charCodeAt(4) | (data.charCodeAt(5) << 8);\n            data = data.slice(4);\n        }\n\n        if (magic != 0xe1 && magic != 0xe4)\n            return null\n\n        function htmlColorToBytes(hexColor: string) {\n            const v = parseInt(hexColor.replace(/#/, \"\"), 16)\n            return [(v >> 0) & 0xff, (v >> 8) & 0xff, (v >> 16) & 0xff, 0xff]\n        }\n\n\n        if (!this.palette) {\n            let arrs = getProjectPalette().map(htmlColorToBytes);\n\n            // Set the alpha for transparency at index 0\n            arrs[0][3] = 0;\n            this.palette = new Uint8Array(arrs.length * 4)\n            for (let i = 0; i < arrs.length; ++i) {\n                this.palette[i * 4 + 0] = arrs[i][0]\n                this.palette[i * 4 + 1] = arrs[i][1]\n                this.palette[i * 4 + 2] = arrs[i][2]\n                this.palette[i * 4 + 3] = arrs[i][3]\n            }\n        }\n\n        if (magic == 0xe1) {\n            return this.genMonochrome(data, w, h);\n        }\n\n        const scaleFactor = ((pxt.BrowserUtils.isEdge() || pxt.BrowserUtils.isIE()) && w < 100 && h < 100) ? 3 : 1;\n        return this.genColor(data, w, h, scaleFactor);\n    }\n\n    genMonochrome(data: string, w: number, h: number) {\n        let outByteW = (w + 3) & ~3\n\n        let bmpHeaderSize = 14 + 40 + this.palette!.length\n        let bmpSize = bmpHeaderSize + outByteW * h\n        let bmp = new Uint8Array(bmpSize)\n\n        bmp[0] = 66\n        bmp[1] = 77\n        pxt.HF2.write32(bmp, 2, bmpSize)\n        pxt.HF2.write32(bmp, 10, bmpHeaderSize)\n        pxt.HF2.write32(bmp, 14, 40) // size of this header\n        pxt.HF2.write32(bmp, 18, w)\n        pxt.HF2.write32(bmp, 22, -h) // not upside down\n        pxt.HF2.write16(bmp, 26, 1) // 1 color plane\n        pxt.HF2.write16(bmp, 28, 8) // 8bpp\n        pxt.HF2.write32(bmp, 38, 2835) // 72dpi\n        pxt.HF2.write32(bmp, 42, 2835)\n        pxt.HF2.write32(bmp, 46, this.palette!.length >> 2)\n\n        bmp.set(this.palette!, 54)\n\n        let inP = 4\n        let outP = bmpHeaderSize\n        let mask = 0x01\n        let v = data.charCodeAt(inP++)\n        for (let x = 0; x < w; ++x) {\n            outP = bmpHeaderSize + x\n            for (let y = 0; y < h; ++y) {\n                bmp[outP] = (v & mask) ? 1 : 0\n                outP += outByteW\n                mask <<= 1\n                if (mask == 0x100) {\n                    mask = 0x01\n                    v = data.charCodeAt(inP++)\n                }\n            }\n        }\n\n        return \"data:image/bmp;base64,\" + btoa(pxt.U.uint8ArrayToString(bmp))\n    }\n\n    genColor(data: string, width: number, height: number, intScale: number) {\n        intScale = Math.max(1, intScale | 0);\n        const w = width * intScale;\n        const h = height * intScale;\n\n        let outByteW = w << 2;\n        let bmpHeaderSize = 138;\n        let bmpSize = bmpHeaderSize + outByteW * h\n        let bmp = new Uint8Array(bmpSize)\n\n        bmp[0] = 66\n        bmp[1] = 77\n        pxt.HF2.write32(bmp, 2, bmpSize)\n        pxt.HF2.write32(bmp, 10, bmpHeaderSize)\n        pxt.HF2.write32(bmp, 14, 124) // size of this header\n        pxt.HF2.write32(bmp, 18, w)\n        pxt.HF2.write32(bmp, 22, -h) // not upside down\n        pxt.HF2.write16(bmp, 26, 1) // 1 color plane\n        pxt.HF2.write16(bmp, 28, 32) // 32bpp\n        pxt.HF2.write16(bmp, 30, 3) // magic?\n        pxt.HF2.write32(bmp, 38, 2835) // 72dpi\n        pxt.HF2.write32(bmp, 42, 2835)\n\n        pxt.HF2.write32(bmp, 54, 0xff0000) // Red bitmask\n        pxt.HF2.write32(bmp, 58, 0xff00) // Green bitmask\n        pxt.HF2.write32(bmp, 62, 0xff) // Blue bitmask\n        pxt.HF2.write32(bmp, 66, 0xff000000) // Alpha bitmask\n\n        // Color space (sRGB)\n        bmp[70] = 0x42; // B\n        bmp[71] = 0x47; // G\n        bmp[72] = 0x52; // R\n        bmp[73] = 0x73; // s\n\n        let inP = 4\n        let outP = bmpHeaderSize\n        let isTransparent = true;\n\n        for (let x = 0; x < w; x++) {\n            let high = false;\n            outP = bmpHeaderSize + (x << 2)\n            let columnStart = inP;\n\n            let v = data.charCodeAt(inP++);\n            let colorStart = high ? (((v >> 4) & 0xf) << 2) : ((v & 0xf) << 2);\n\n            for (let y = 0; y < h; y++) {\n                if (v) isTransparent = false;\n                bmp[outP] = this.palette![colorStart]\n                bmp[outP + 1] = this.palette![colorStart + 1]\n                bmp[outP + 2] = this.palette![colorStart + 2]\n                bmp[outP + 3] = this.palette![colorStart + 3]\n                outP += outByteW\n\n                if (y % intScale === intScale - 1) {\n                    if (high) {\n                        v = data.charCodeAt(inP++);\n                    }\n                    high = !high;\n\n                    colorStart = high ? (((v >> 4) & 0xf) << 2) : ((v & 0xf) << 2);\n                }\n            }\n\n            if (isTransparent) {\n                // If all pixels are completely transparent, browsers won't render the image properly;\n                // set one pixel to be slightly opaque to fix that\n                bmp[bmpHeaderSize + 3] = 1;\n            }\n\n            if (x % intScale === intScale - 1) {\n                if (!(height % 2)) --inP;\n                while (inP & 3) inP++\n            }\n            else {\n                inP = columnStart;\n            }\n        }\n\n        return \"data:image/bmp;base64,\" + btoa(pxt.U.uint8ArrayToString(bmp))\n    }\n}\n\n\nexport function generatePreviewURI(asset: pxt.Asset, imgConv = new ImageConverter()) {\n    switch (asset.type) {\n        case AssetType.Image:\n        case AssetType.Tile:\n            asset.previewURI = imgConv.convert(\"data:image/x-mkcd-f,\" + (asset as pxt.ProjectImage).jresData);\n            return asset;\n        case AssetType.Tilemap:\n            let tilemap = asset as pxt.ProjectTilemap;\n            asset.previewURI = tilemapToImageURI(tilemap.data, Math.max(tilemap.data.tilemap.width, tilemap.data.tilemap.height), false);\n            return asset;\n        case AssetType.Animation:\n            let anim = asset as pxt.Animation;\n            if (anim.frames?.length <= 0) return null;\n            (anim as any).framePreviewURIs = anim.frames.map(bitmap => imgConv.convert(\"data:image/x-mkcd-f,\" + pxt.sprite.base64EncodeBitmap(bitmap)));\n            asset.previewURI = (anim as any).framePreviewURIs[0];\n            return asset;\n    }\n}\n\nexport function tilemapToImageURI(data: pxt.sprite.TilemapData, sideLength: number, lightMode: boolean) {\n    const colors = getProjectPalette();\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = sideLength;\n    canvas.height = sideLength;\n\n    // Works well for all of our default sizes, does not work well if the size is not\n    // a multiple of 2 or is greater than 32 (i.e. from the decompiler)\n    const cellSize = Math.min(sideLength / data.tilemap.width, sideLength / data.tilemap.height);\n\n    // Center the image if it isn't square\n    const xOffset = Math.max(Math.floor((sideLength * (1 - (data.tilemap.width / data.tilemap.height))) / 2), 0);\n    const yOffset = Math.max(Math.floor((sideLength * (1 - (data.tilemap.height / data.tilemap.width))) / 2), 0);\n\n    let context: CanvasRenderingContext2D;\n    if (lightMode) {\n        context = canvas.getContext(\"2d\", { alpha: false })!;\n        context.fillStyle = \"#dedede\";\n        context.fillRect(0, 0, sideLength, sideLength);\n    }\n    else {\n        context = canvas.getContext(\"2d\")!;\n    }\n\n    let tileColors: string[] = [];\n\n    for (let c = 0; c < data.tilemap.width; c++) {\n        for (let r = 0; r < data.tilemap.height; r++) {\n            const tile = data.tilemap.get(c, r);\n\n            if (tile) {\n                if (!tileColors[tile]) {\n                    const tileInfo = data.tileset.tiles[tile];\n                    tileColors[tile] = tileInfo ? pxt.sprite.computeAverageColor(pxt.sprite.Bitmap.fromData(tileInfo.bitmap), colors) : \"#dedede\";\n                }\n\n                context.fillStyle = tileColors[tile];\n                context.fillRect(xOffset + c * cellSize, yOffset + r * cellSize, cellSize, cellSize);\n            }\n            else if (lightMode) {\n                context.fillStyle = \"#dedede\";\n                context.fillRect(xOffset + c * cellSize, yOffset + r * cellSize, cellSize, cellSize);\n            }\n        }\n    }\n\n    return canvas.toDataURL();\n}\n","import { uint8ArrayToString, hexToUint8Array } from \"./util\";\n\nexport interface JRESImage {\n    data: string; // Base64 encoded string of f4 encoded bytes\n    previewURI: string; // PNG data uri\n    width: number;\n    height: number;\n\n    qualifiedName?: string;\n    tilemapTile?: boolean;\n    sourceFile?: string;\n}\n\nexport interface ImageInfo {\n    width: number;\n    height: number;\n    pixels: Uint8ClampedArray;\n}\n\nexport async function getImageFromURIAsync(uri: string): Promise<ImageInfo | null> {\n    const loaded = await loadImageAsync(uri);\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = loaded.width;\n    canvas.height = loaded.height;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return null;\n\n    ctx.drawImage(loaded, 0, 0);\n    const data = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n    return {\n        width: data.width,\n        height: data.height,\n        pixels: data.data\n    };\n}\n\nasync function loadImageAsync(uri: string): Promise<HTMLImageElement> {\n    return new Promise<HTMLImageElement>(resolve => {\n        const el = document.createElement(\"img\");\n        el.src = uri\n        el.onload = () => {\n            resolve(el)\n        };\n    })\n}\n\nexport async function getJRESImageFromUint8Array(buf: Uint8Array, palette: string[]): Promise<JRESImage | null> {\n    const encoded = btoa(uint8ArrayToString(buf));\n    const imageInfo = await getImageFromURIAsync(\"data:image/png;base64,\" + encoded);\n    if (imageInfo) {\n        const imageLit = imgEncodeImage(imageInfo, palette);\n        return await getJRESImageFromImageLiteral(imageLit, palette);\n    }\n    return null;\n}\n\nexport async function getImageLiteralFromUint8Array(buf: Uint8Array, palette: string[]): Promise<string | null> {\n    const encoded = btoa(uint8ArrayToString(buf));\n    const imageInfo = await getImageFromURIAsync(\"data:image/png;base64,\" + encoded);\n    if (imageInfo) {\n        return imgEncodeImage(imageInfo, palette);\n    }\n    return null;\n}\n\n\nexport function getJRESImageFromDataString(data: string, palette: string[], qname?: string, tilemapTile?: boolean, sourceFile?: string): JRESImage {\n    const bitmap = jresDataToBitmap(data);\n\n    return getJRESImage(bitmap, palette, data, qname, tilemapTile, sourceFile)\n}\n\nexport function getJRESImageFromImageLiteral(literal: string, palette: string[], sourceFile?: string) {\n    const bitmap = imageLiteralToBitmap(literal);\n    return getJRESImage(bitmap, palette, undefined, undefined, undefined, sourceFile)\n}\n\n\nfunction getJRESImage(bitmap: Bitmap, palette: string[], data?: string, qname?: string, tilemapTile?: boolean, sourceFile?: string): JRESImage {\n    return {\n        width: bitmap.width,\n        height: bitmap.height,\n        data: data || base64EncodeBitmap(bitmap),\n        previewURI: bitmapToImageURI(bitmap, palette),\n        qualifiedName: qname,\n        tilemapTile,\n        sourceFile\n    }\n}\n\nexport function imgEncodeJRESImage(image: JRESImage) {\n    const bitmap = jresDataToBitmap(image.data);\n    return bitmapToImageLiteral(bitmap, \"typescript\");\n}\n\n\nconst hexChars = [\".\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n\nfunction bitmapToImageLiteral(bitmap: Bitmap, fileType: \"typescript\" | \"python\"): string {\n    let res = '';\n    switch (fileType) {\n        case \"python\":\n            res = \"img(\\\"\\\"\\\"\";\n            break;\n        default:\n            res = \"img`\";\n            break;\n    }\n\n    if (bitmap) {\n        for (let r = 0; r < bitmap.height; r++) {\n            res += \"\\n\"\n            for (let c = 0; c < bitmap.width; c++) {\n                res += hexChars[bitmap.get(c, r)] + \" \";\n            }\n        }\n    }\n\n    res += \"\\n\";\n\n    switch (fileType) {\n        case \"python\":\n            res += \"\\\"\\\"\\\")\";\n            break;\n        default:\n            res += \"`\";\n            break;\n    }\n\n    return res;\n}\n\n\n/**\n * Encodes the image in the image/mkcd-f4 format (used for the data attribute in jres files)\n * @param image\n * @param colors\n */\nexport function f4EncodeImage(image: ImageInfo, colors: string[]) {\n    const palette = colorsToNumbers(colors);\n\n    return f4EncodeImgCore(image.width, image.height, 4, (x, y) => {\n        const index = y * image.width + x;\n        return closestColor(image.pixels, index << 2, palette);\n    });\n}\n\n/**\n * Encodes the image as an img`` literal\n * @param image\n * @param colors\n */\nexport function imgEncodeImage(image: ImageInfo, colors: string[]) {\n    const palette = colorsToNumbers(colors);\n\n    return imgEncodeImgCore(image.width, image.height, (x, y) => {\n        const index = y * image.width + x;\n        return closestColor(image.pixels, index << 2, palette);\n    });\n}\n\nfunction colorsToNumbers(colors: string[]): number[][] {\n    const res: number[][] = [];\n    for (let i = 0; i < colors.length; i++) {\n        const color = parseColorString(colors[i]);\n        res.push([_r(color), _g(color), _b(color)]);\n    }\n    return res;\n}\n\n// use geometric distance on colors\nfunction scale(v: number) {\n    return v * v\n}\n\nfunction closestColor(buf: Uint8ClampedArray, pix: number, palette: number[][], alpha = true) {\n    if (alpha && buf[pix + 3] < 100)\n        return 0 // transparent\n    let mindelta = 0\n    let idx = -1\n    for (let i = alpha ? 1 : 0; i < palette.length; ++i) {\n        let delta = scale(palette[i][0] - buf[pix + 0]) + scale(palette[i][1] - buf[pix + 1]) + scale(palette[i][2] - buf[pix + 2])\n        if (idx < 0 || delta < mindelta) {\n            idx = i\n            mindelta = delta\n        }\n    }\n    return idx\n}\n\nfunction f4EncodeImgCore(w: number, h: number, bpp: number, getPix: (x: number, y: number) => number) {\n    let r = hex2(0xe0 | bpp) + hex2(w) + hex2(h) + \"00\"\n    let ptr = 4\n    let curr = 0\n    let shift = 0\n\n    let pushBits = (n: number) => {\n        curr |= n << shift\n        // eslint-disable-next-line\n        if (shift == 8 - bpp) {\n            r += hex2(curr)\n            ptr++\n            curr = 0\n            shift = 0\n        } else {\n            shift += bpp\n        }\n    }\n\n    for (let i = 0; i < w; ++i) {\n        for (let j = 0; j < h; ++j)\n            pushBits(getPix(i, j))\n        // eslint-disable-next-line\n        while (shift != 0)\n            pushBits(0)\n        if (bpp > 1) {\n            while (ptr & 3)\n                pushBits(0)\n        }\n    }\n\n    return r\n\n    function hex2(n: number) {\n        return (\"0\" + n.toString(16)).slice(-2)\n    }\n}\n\nfunction imgEncodeImgCore(w: number, h: number, getPix: (x: number, y: number) => number) {\n    let res = \"img`\\n    \"\n    for (let r = 0; r < h; r++) {\n        let row: number[] = []\n        for (let c = 0; c < w; c++) {\n            row.push(getPix(c, r));\n        }\n        res += row.map(n => n.toString(16)).join(\" \");\n        res += \"\\n    \"\n    }\n    res += \"`\";\n    return res;\n}\n\nfunction base64EncodeBitmap(bitmap: Bitmap) {\n    const hex = f4EncodeImgCore(bitmap.width, bitmap.height, 4, (x, y) => bitmap.get(x, y));\n    return btoa(uint8ArrayToString(hexToUint8Array(hex)))\n}\n\nfunction _r(color: number) { return (color >> 16) & 0xff }\nfunction _g(color: number) { return (color >> 8) & 0xff }\nfunction _b(color: number) { return color & 0xff }\n\nfunction parseColorString(color: string) {\n    if (color) {\n        if (color.length === 6) {\n            return parseInt(\"0x\" + color);\n        }\n        else if (color.length === 7) {\n            return parseInt(\"0x\" + color.substr(1));\n        }\n    }\n    return 0;\n}\n\n/**\n * 16-color sprite\n */\nexport class Bitmap {\n    protected buf: Uint8ClampedArray;\n\n    constructor(public width: number, public height: number, public x0 = 0, public y0 = 0, buf?: Uint8ClampedArray) {\n        this.buf = buf || new Uint8ClampedArray(this.dataLength());\n    }\n\n    set(col: number, row: number, value: number) {\n        if (col < this.width && row < this.height && col >= 0 && row >= 0) {\n            const index = this.coordToIndex(col, row);\n            this.setCore(index, value);\n        }\n    }\n\n    get(col: number, row: number) {\n        if (col < this.width && row < this.height && col >= 0 && row >= 0) {\n            const index = this.coordToIndex(col, row);\n            return this.getCore(index);\n        }\n        return 0;\n    }\n\n    protected coordToIndex(col: number, row: number) {\n        return col + row * this.width;\n    }\n\n    protected getCore(index: number) {\n        const cell = Math.floor(index / 2);\n        if (index % 2 === 0) {\n            return this.buf[cell] & 0xf;\n        }\n        else {\n            return (this.buf[cell] & 0xf0) >> 4;\n        }\n    }\n\n    protected setCore(index: number, value: number) {\n        const cell = Math.floor(index / 2);\n        if (index % 2 === 0) {\n            this.buf[cell] = (this.buf[cell] & 0xf0) | (value & 0xf);\n        }\n        else {\n            this.buf[cell] = (this.buf[cell] & 0x0f) | ((value & 0xf) << 4);\n        }\n    }\n\n    protected dataLength() {\n        return Math.ceil(this.width * this.height / 2);\n    }\n}\n\n\nfunction jresDataToBitmap(jresURL: string) {\n    let data = atob(jresURL.slice(jresURL.indexOf(\",\") + 1))\n    let magic = data.charCodeAt(0);\n    let w = data.charCodeAt(1);\n    let h = data.charCodeAt(2);\n\n    if (magic === 0x87) {\n        magic = 0xe0 | data.charCodeAt(1);\n        w = data.charCodeAt(2) | (data.charCodeAt(3) << 8);\n        h = data.charCodeAt(4) | (data.charCodeAt(5) << 8);\n        data = data.slice(4);\n    }\n\n    const out = new Bitmap(w, h);\n\n    let index = 4\n    if (magic === 0xe1) {\n        // Monochrome\n        let mask = 0x01\n        let v = data.charCodeAt(index++)\n        for (let x = 0; x < w; ++x) {\n            for (let y = 0; y < h; ++y) {\n                out.set(x, y, (v & mask) ? 1 : 0);\n                mask <<= 1\n                // eslint-disable-next-line\n                if (mask == 0x100) {\n                    mask = 0x01\n                    v = data.charCodeAt(index++)\n                }\n            }\n        }\n    }\n    else {\n        // Color\n        for (let x = 0; x < w; x++) {\n            for (let y = 0; y < h; y += 2) {\n                let v = data.charCodeAt(index++)\n                out.set(x, y, v & 0xf);\n                // eslint-disable-next-line\n                if (y != h - 1) {\n                    out.set(x, y + 1, (v >> 4) & 0xf);\n                }\n            }\n            while (index & 3) index++\n        }\n    }\n\n    return out;\n}\n\nfunction imageLiteralToBitmap(text: string, defaultPattern?: string): Bitmap {\n    // Strip the tagged template string business and the whitespace. We don't have to exhaustively\n    // replace encoded characters because the compiler will catch any disallowed characters and throw\n    // an error before the decompilation happens. 96 is backtick and 9 is tab\n    text = text.replace(/[ `]|(?:&#96;)|(?:&#9;)|(?:img)/g, \"\").trim();\n    // eslint-disable-next-line\n    text = text.replace(/^[\"`\\(\\)]*/, '').replace(/[\"`\\(\\)]*$/, '');\n    text = text.replace(/&#10;/g, \"\\n\");\n\n    if (!text && defaultPattern)\n        text = defaultPattern;\n\n    const rows = text.split(\"\\n\");\n\n    // We support \"ragged\" sprites so not all rows will be the same length\n    const sprite: number[][] = [];\n    let spriteWidth = 0;\n\n    for (let r = 0; r < rows.length; r++) {\n        const row = rows[r];\n        const rowValues: number[] = [];\n        for (let c = 0; c < row.length; c++) {\n            // This list comes from libs/screen/targetOverrides.ts in pxt-arcade\n            // Technically, this could change per target.\n            switch (row[c]) {\n                case \"0\": case \".\": rowValues.push(0); break;\n                case \"1\": case \"#\": rowValues.push(1); break;\n                case \"2\": case \"T\": rowValues.push(2); break;\n                case \"3\": case \"t\": rowValues.push(3); break;\n                case \"4\": case \"N\": rowValues.push(4); break;\n                case \"5\": case \"n\": rowValues.push(5); break;\n                case \"6\": case \"G\": rowValues.push(6); break;\n                case \"7\": case \"g\": rowValues.push(7); break;\n                case \"8\": rowValues.push(8); break;\n                case \"9\": rowValues.push(9); break;\n                case \"a\": case \"A\": case \"R\": rowValues.push(10); break;\n                case \"b\": case \"B\": case \"P\": rowValues.push(11); break;\n                case \"c\": case \"C\": case \"p\": rowValues.push(12); break;\n                case \"d\": case \"D\": case \"O\": rowValues.push(13); break;\n                case \"e\": case \"E\": case \"Y\": rowValues.push(14); break;\n                case \"f\": case \"F\": case \"W\": rowValues.push(15); break;\n            }\n        }\n\n        if (rowValues.length) {\n            sprite.push(rowValues);\n            spriteWidth = Math.max(spriteWidth, rowValues.length);\n        }\n    }\n\n    const spriteHeight = sprite.length;\n\n    const result = new Bitmap(spriteWidth, spriteHeight)\n\n    for (let r = 0; r < spriteHeight; r++) {\n        const row = sprite[r];\n        for (let c = 0; c < spriteWidth; c++) {\n            if (c < row.length) {\n                result.set(c, r, row[c]);\n            }\n            else {\n                result.set(c, r, 0);\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * Converts a bitmap into a square image suitable for display\n */\nfunction bitmapToImageURI(frame: Bitmap, colors: string[]) {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = frame.width;\n    canvas.height = frame.height;\n\n    let context = canvas.getContext(\"2d\");\n\n    if (context) {\n        for (let c = 0; c < frame.width; c++) {\n            for (let r = 0; r < frame.height; r++) {\n                const color = frame.get(c, r);\n\n                if (color) {\n                    context.fillStyle = colors[color];\n                    context.fillRect(c, r, 1, 1);\n                }\n            }\n        }\n    }\n\n\n    return canvas.toDataURL();\n}\n\n","import { AssetType, getProjectPalette, getTilemapProject } from \"./project\";\nimport { ScriptMeta } from \"./share\";\n\nconst backendEndpoint = \"https://makecode.com/api\";\n\n\nexport async function importScriptAsync(url: string) {\n    // https://makecode.com/_UAVXEwU7RAew\n    // https://arcade.makecode.com/62736-71028-62577-28752\n    let scriptID = url.trim();\n\n    if (scriptID.indexOf(\"/\") !== -1) {\n        scriptID = scriptID.substr(scriptID.lastIndexOf(\"/\") + 1)\n    }\n\n    const meta: ScriptMeta = await httpGetJSONAsync(backendEndpoint + \"/\" + scriptID);\n    const filesystem: {[index: string]: string} = await httpGetJSONAsync(backendEndpoint + \"/\" + scriptID + \"/text\");\n\n    loadImagesFromProject(filesystem);\n}\n\nexport function loadImagesFromProject(filesystem: pxt.Map<string>) {\n    // A mapping of filenames to filecontents\n    const config = filesystem[\"pxt.json\"];\n\n    let palette = getProjectPalette();\n    let paletteIsCustom = false;\n\n    if (config) {\n        try {\n            let parsedConfig = JSON.parse(config);\n\n            if (parsedConfig?.palette && Array.isArray(parsedConfig.palette)) {\n                palette = parsedConfig.palette.slice()\n                paletteIsCustom = true;\n            }\n        }\n        catch (e) {\n            // ignore\n        }\n    }\n\n    const project = getTilemapProject();\n\n    for (const file of Object.keys(filesystem)) {\n        if (file.endsWith(\".jres\")) {\n            const jres = JSON.parse(filesystem[file]);\n            if (file.indexOf(\"tilemap\") !== -1) {\n                project.loadTilemapJRes(jres);\n            }\n            else {\n                project.loadAssetsJRes(jres);\n            }\n        }\n        else if (file.endsWith(\".ts\") && !file.endsWith(\".g.ts\")) {\n            grabImagesFromTypeScript(filesystem[file]);\n        }\n    }\n}\n\nfunction grabImagesFromTypeScript(fileText: string) {\n    const literalRegex = /img\\s*`[\\s\\da-f.#tngrpoyw]*`/img;\n\n    const project = getTilemapProject();\n\n\n    fileText.replace(literalRegex, match => {\n        const bitmap = pxt.sprite.imageLiteralToBitmap(match);\n        project.createNewProjectImage(bitmap.data(), getDefaultAssetDisplayName(AssetType.Image));\n        return \"\";\n    });\n}\n\nfunction getDefaultAssetDisplayName(type: pxt.AssetType): string {\n    switch (type) {\n        case AssetType.Image:\n            return lf(\"myImage\");\n        case AssetType.Tile:\n            return lf(\"myTile\");\n        case AssetType.Tilemap:\n            return lf(\"level\");\n        case AssetType.Animation:\n            return lf(\"myAnim\");\n        default:\n            return lf(\"asset\")\n    }\n}\n\nfunction httpGetJSONAsync(url: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n        const request = new XMLHttpRequest();\n\n        request.addEventListener(\"error\", err => {\n            reject(err);\n        });\n\n        request.addEventListener(\"load\", () => {\n            try {\n                resolve(JSON.parse(request.responseText));\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n\n        request.open(\"GET\", url);\n        request.send();\n    });\n}","\n// @ts-ignore\nimport * as LZMA from \"../node_modules/lzma/src/lzma_worker-min\";\n\nexport function lzmaCompressAsync(text: string) {\n    const lzma = LZMA.LZMA;\n\n    return new Promise<Uint8Array>((resolve, reject) => {\n        try {\n            lzma.compress(text, 7, (res: any, error: any) => {\n                if (error) reject(error);\n                else resolve(new Uint8Array(res));\n            });\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}\n\nexport function lzmaDecompressAsync(data: Uint8Array) {\n    const lzma = LZMA.LZMA;\n\n    return new Promise<string>((resolve, reject) => {\n        try {\n            lzma.decompress(data, (res: string, error: any) => {\n                if (error) reject(error);\n                else resolve(res);\n            });\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n}","import React from 'react';\nimport { fileReadAsBufferAsync, setupDragAndDrop } from '../dragAndDrop';\nimport { getImageLiteralFromUint8Array } from '../images';\nimport { loadImagesFromProject } from '../import';\nimport { lzmaDecompressAsync } from '../lzma';\nimport { getProjectPalette, getTilemapProject } from '../project';\nimport '../styles/Alert.css';\n\ninterface AlertOption {\n    text: string;\n    onClick: (input?: string) => void;\n    style?: { [key: string]: string };\n}\n\nexport interface AlertState {\n    dragging: boolean;\n}\n\nexport interface AlertProps {\n    type?: string;\n    title: string;\n    text: string;\n    icon?: string;\n    options?: AlertOption[];\n    visible?: boolean;\n    onClose?: () => void;\n}\n\nexport class Alert extends React.Component<AlertProps, AlertState> {\n    protected importInputRef: HTMLInputElement | undefined;\n    protected dragInit: boolean = false;\n\n    constructor(props: AlertProps) {\n        super(props);\n\n        this.state = {\n            dragging: false\n        };\n    }\n    onAlertClick(evt: any) {\n        evt.stopPropagation();\n        evt.preventDefault();\n    }\n\n    render() {\n        if (!this.props.visible) return <div />;\n\n        const { title, text, icon, options, onClose, type } = this.props;\n        const { dragging } = this.state;\n\n        return <div className=\"alert-container\" onClick={onClose}>\n            <div className=\"alert\" onClick={this.onAlertClick}>\n                <div className=\"alert-title\">\n                    {icon && <i className={`alert-icon icon ${icon}`}></i>}\n                    <span>{title}</span>\n                    <i className=\"icon delete\" onClick={onClose}></i>\n                </div>\n                <div className=\"alert-text\">{text}</div>\n                {type === \"import\" && <div className=\"asset-import\">\n                    <div className={`asset-drop ${dragging ? \"dragging\" : \"\"}`} ref={this.handleDropRef} onDragEnter={this.onImportDragEnter} onDragLeave={this.onImportDragLeave}>\n                        Drop PNG files here to import.\n                    </div>\n                    <input ref={this.handleImportInputRef} placeholder=\"https://makecode.com/_r8fboJQTDPtH or https://arcade.makeode.com/62736-71128-62577-28722\" />\n                </div>}\n                {type === \"scale\" && <div className=\"asset-import\">\n                    <input ref={this.handleImportInputRef} placeholder=\"1\" />\n                </div>}\n                {options && <div className=\"alert-options\">\n                    {options.map((el, i) => {\n                        const onClick = () => {\n                            el.onClick(this.importInputRef?.value);\n                            if (onClose) onClose();\n                        }\n                        return <div key={i} onClick={onClick} style={el.style}>{el.text}</div>\n                    })}\n                </div>}\n            </div>\n        </div>\n    }\n\n\n    protected handleImportInputRef = (el: HTMLInputElement) => {\n        if (el) {\n            this.importInputRef = el;\n        }\n    }\n\n    protected onImportDragEnter = (e: any) => {\n        this.setState({ dragging: true });\n    }\n\n    protected onImportDragLeave = (e: any) => {\n        this.setState({ dragging: false });\n    }\n\n\n    protected handleDropRef = (el: HTMLInputElement) => {\n        if (!this.dragInit) {\n            this.dragInit = true;\n            setupDragAndDrop(document.body, f => true, async files => {\n                for (const f of files) {\n                    const idx = f.name.lastIndexOf(\".\");\n                    const ext = f.name.substr(idx);\n                    const name = f.name.slice(0, idx);\n                    if (ext.toLowerCase() === \".png\") {\n                        const buf = await fileReadAsBufferAsync(f);\n                        if (buf) {\n                            const literal = await getImageLiteralFromUint8Array(buf, getProjectPalette());\n\n                            if (literal) {\n                                getTilemapProject().createNewProjectImage(pxt.sprite.imageLiteralToBitmap(literal).data(), name)\n                            }\n\n                            if (this.props.onClose) this.props.onClose();\n                        }\n                    }\n                    else if (ext.toLowerCase() === \".mkcd\") {\n                        const buf = await fileReadAsBufferAsync(f);\n                        if (buf) {\n                            const text = await lzmaDecompressAsync(buf);\n                            try {\n                                const project = JSON.parse(text);\n                                const files = JSON.parse(project.source);\n\n                                loadImagesFromProject(files);\n                                if (this.props.onClose) this.props.onClose();\n                            }\n                            catch (e) {\n\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n}","import React, { useState } from 'react';\nimport { getTilemapProject } from '../project';\n\nimport \"../styles/AssetPreview.css\";\nimport { generatePreviewURI } from '../util';\n\n\nexport interface AssetPreviewProps {\n    asset: pxt.Asset;\n    selected?: boolean;\n    onClick: (asset: pxt.Asset) => void;\n}\n\nexport const AssetPreview = (props: AssetPreviewProps) => {\n    const { asset, selected, onClick } = props;\n\n    const [ revision, setRevision ] = useState(0);\n    const project = getTilemapProject();\n\n    let onAssetChange = () => {\n        setRevision(revision + 1);\n        project.removeChangeListener(asset.type, onAssetChange);\n    }\n    project.addChangeListener(asset, onAssetChange);\n\n    let updated = project.lookupAsset(asset.type, asset.id);\n    generatePreviewURI(updated);\n\n    return <div className={`asset-preview ${selected ? \"selected\" : \"\"}`} onClick={() => onClick(updated)}>\n        <img src={updated.previewURI} />\n    </div>\n}","import React from \"react\";\n\nimport \"../styles/Button.css\";\n\ninterface ButtonProps {\n    label: string;\n    title: string;\n    onClick: () => void;\n}\n\nexport const Button = (props: ButtonProps) => {\n    const { label, title, onClick } = props;\n\n    return <button className=\"asset-details-button\" title={title} onClick={onClick}>\n        {label}\n    </button>\n}","import React, { useState } from \"react\";\nimport { AssetType, getTilemapProject, saveProject } from \"../project\";\nimport { AssetPreview } from \"./AssetPreview\";\n\nimport \"../styles/AssetList.css\";\nimport { Button } from \"./Button\";\n\nexport interface AssetListProps {\n    activeTab: pxt.AssetType;\n    asset: pxt.Asset;\n    onAssetSelected: (asset: pxt.Asset) => void;\n}\n\nexport const AssetList = (props: AssetListProps) => {\n    const { activeTab, asset, onAssetSelected } = props;\n    const project = getTilemapProject();\n\n    const assets = project.getAssets(activeTab);\n    assets.sort(compareInternalId);\n\n    let pluralized = \"\";\n\n    switch (activeTab) {\n        case AssetType.Image:\n            pluralized = \"Images\";\n            break;\n        case AssetType.Tile:\n            pluralized = \"Tiles\";\n            break;\n        case AssetType.Animation:\n            pluralized = \"Animations\";\n            break;\n        case AssetType.Tilemap:\n            pluralized = \"Tilemaps\";\n            break;\n    }\n\n    const createNewAsset = () => {\n        onAssetSelected(createEmptyAsset(activeTab));\n    }\n\n    const [revision, setRevision] = useState(0);\n\n    const debouncedSave = pxt.Util.debounce(() => {\n        saveProject();\n    }, 500)\n\n\n    const revisionListener = (revision: number) => {\n        setRevision(revision);\n        debouncedSave();\n        project.removeProjectChangeListener(revisionListener);\n    };\n\n    project.addProjectChangeListener(revisionListener);\n\n    return <div className=\"asset-list-container\">\n        <div className=\"asset-details-header\">\n            All {pluralized}\n        </div>\n        <div className=\"asset-list-outer\">\n            <div className=\"asset-list\">\n                { assets.map(a => <AssetPreview key={a.internalID} asset={a} selected={a.id == asset.id} onClick={onAssetSelected} />) }\n                <Button label=\"Create New\" title=\"Create New Asset\" onClick={createNewAsset} />\n            </div>\n        </div>\n    </div>\n}\n\nfunction compareInternalId(a: pxt.Asset, b: pxt.Asset) {\n    return a.internalID - b.internalID;\n}\n\nexport function createEmptyAsset(kind: pxt.AssetType) {\n    let asset: pxt.Asset;\n    const project = getTilemapProject();\n    switch (kind) {\n        case AssetType.Image:\n            asset = project.createNewImage(16, 16);\n            break;\n        case AssetType.Tile:\n            asset = project.createNewTile(new pxt.sprite.Bitmap(16, 16).data());\n            break;\n        case AssetType.Animation:\n            asset = project.createNewAnimation(16, 16);\n            break;\n        case AssetType.Tilemap:\n            const [id, tilemap] = project.createNewTilemap(\"level\", 16, 16);\n            asset = project.lookupAsset(AssetType.Tilemap, id);\n            break;\n    }\n\n    if (!asset!.meta.displayName) {\n        asset!.meta.displayName = pxt.getDefaultAssetDisplayName(kind);\n        project.updateAsset(asset!);\n        asset = project.lookupAsset(asset!.type, asset!.id);\n    }\n\n    return asset!;\n}","import React, { useState } from \"react\";\n\nimport \"../styles/Dropdown.css\";\n\nexport interface DropdownItem {\n    id: string;\n    label: string;\n}\n\nexport interface DropdownProps {\n    items: DropdownItem[];\n    selectedId: string;\n    onItemSelected: (id: string) => void;\n}\n\nexport const Dropdown = (props: DropdownProps) => {\n    const { items, selectedId, onItemSelected } = props;\n    const [ isOpen, setIsOpen ] = useState(false);\n\n    const selected = items.find(item => item.id === selectedId);\n\n    return <div className={`dropdown ${isOpen ? \"open\" : \"\"}`} onClick={() => setIsOpen(!isOpen)}>\n        <span className=\"dropdown-title\">{selected?.label}</span>\n        <i className=\"icon caret down\" />\n        {isOpen &&\n            <div className=\"dropdown-menu\">\n                {items.map(item => (\n                    <div key={item.id} className={`dropdown-menu-item ${item.id === selectedId ? \"selected\" : \"\"}`} onClick={() => onItemSelected(item.id)}>\n                        {item.label}\n                    </div>\n                ))}\n            </div>\n        }\n    </div>\n}","import React from \"react\";\nimport { AssetType, getTilemapProject } from \"../project\";\nimport { AlertProps } from \"./Alert\";\nimport { Dropdown, DropdownItem } from \"./Dropdown\";\n\nimport '../styles/AssetDetails.css';\nimport { Button } from \"./Button\";\nimport { generatePreviewURI } from \"../util\";\n\n\ninterface AssetDetailsProps {\n    showAlert(alert: AlertProps): void;\n    onAssetSelected: (asset: pxt.Asset) => void;\n    asset: pxt.Asset;\n}\n\nconst tileDropdownOptions: DropdownItem[] = [\n    {\n        id: \"8\",\n        label: \"8x8\"\n    },\n    {\n        id: \"16\",\n        label: \"16x16\"\n    },\n    {\n        id: \"32\",\n        label: \"32x32\"\n    }\n]\n\n\nexport const AssetDetails = (props: AssetDetailsProps) => {\n    const { asset, showAlert, onAssetSelected } = props;\n\n    const showTileSizeDropdown = asset.type === AssetType.Tile || asset.type === AssetType.Tilemap;\n\n    const onTileSizeSelected = (size: string) => {\n        const currentAsset = getTilemapProject().lookupAsset(asset.type, asset.id);\n        const tileSize = parseInt(size);\n        let showWarning = false;\n        if (currentAsset.type === AssetType.Tile) {\n            const tile = currentAsset as pxt.Tile;\n            showWarning = !isEmptyBitmap(tile.bitmap) && tileSize < tile.bitmap.width;\n        }\n        else {\n            showWarning = !isEmptyTilemap((currentAsset as pxt.ProjectTilemap).data);\n        }\n\n        if (showWarning) {\n            showAlert({\n                icon: \"exclamation triangle\",\n                title: \"WARNING\",\n                text: \"This will erase the contents of the current asset. This cannot be undone. Do you want to continue?\",\n                options: [{\n                        text: \"Yes\",\n                        style: {\n                            backgroundColor: \"#dc3f34\"\n                        },\n                        onClick: () => {\n                            changeTileSize(currentAsset, tileSize);\n                            onAssetSelected(currentAsset);\n                        }\n                    }]\n            });\n        }\n        else {\n            changeTileSize(currentAsset, tileSize);\n            onAssetSelected(currentAsset);\n        }\n    }\n\n    const onDuplicate = () => {\n        const dup = getTilemapProject().duplicateAsset(asset);\n        generatePreviewURI(dup);\n        onAssetSelected(dup);\n    }\n\n    const onDelete = () => {\n        showAlert({\n            icon: \"exclamation triangle\",\n            title: \"WARNING\",\n            text: \"This will delete this asset. This cannot be undone. Do you want to continue?\",\n            options: [{\n                    text: \"Yes\",\n                    style: {\n                        backgroundColor: \"#dc3f34\"\n                    },\n                    onClick: () => {\n                        getTilemapProject().removeAsset(asset);\n                        onAssetSelected(null as any);\n                    }\n                }]\n        });\n    }\n\n    return <div className=\"asset-details\">\n        <div className=\"asset-details-header\">\n            Asset Options\n        </div>\n        <div className=\"asset-details-parameters\">\n            {showTileSizeDropdown &&\n                <div className=\"asset-details-key-value\">\n                    <div className=\"asset-details-key\">\n                        Tile Size:\n                    </div>\n                    <Dropdown\n                        items={tileDropdownOptions}\n                        onItemSelected={onTileSizeSelected}\n                        selectedId={\"\" + getTileWidth(asset)}/>\n                </div>\n            }\n            <Button label=\"Duplicate\" title=\"Create a copy of this asset\" onClick={onDuplicate} />\n            <Button label=\"Delete\" title=\"Delete this asset\" onClick={onDelete} />\n        </div>\n    </div>\n}\n\nfunction getTileWidth(asset: pxt.Asset) {\n    if (asset.type === AssetType.Tilemap) {\n        return (asset as pxt.ProjectTilemap).data.tileset.tileWidth;\n    }\n    else if (asset.type === AssetType.Tile) {\n        return (asset as pxt.Tile).bitmap.width;\n    }\n}\n\nfunction isEmptyBitmap(data: pxt.sprite.BitmapData) {\n    const bitmap = pxt.sprite.Bitmap.fromData(data);\n\n    for (let x = 0; x < data.width; x++) {\n        for (let y = 0; y < data.height; y++) {\n            if (bitmap.get(x, y)) return false;\n        }\n    }\n    return true;\n}\n\nfunction isEmptyTilemap(data: pxt.sprite.TilemapData) {\n    if (!isEmptyBitmap(data.layers)) return false;\n\n    const bitmap = data.tilemap\n\n    for (let x = 0; x < bitmap.width; x++) {\n        for (let y = 0; y < bitmap.height; y++) {\n            if (bitmap.get(x, y)) return false;\n        }\n    }\n    return true;\n}\n\nfunction changeTileSize(asset: pxt.Asset, tileSize: number) {\n    const project = getTilemapProject();\n\n    if (asset.type === AssetType.Tile) {\n        const tile = asset as pxt.Tile;\n        const oldBitmap = pxt.sprite.Bitmap.fromData(tile.bitmap);\n        const newBitmap = new pxt.sprite.Bitmap(tileSize, tileSize);\n        newBitmap.apply(oldBitmap);\n        tile.bitmap = newBitmap.data();\n\n    }\n    else {\n        const tilemap = asset as pxt.ProjectTilemap;\n        const newTilemap = new pxt.sprite.Tilemap(tilemap.data.tilemap.width, tilemap.data.tilemap.height);\n        const newLayers = new pxt.sprite.Bitmap(tilemap.data.tilemap.width, tilemap.data.tilemap.height)\n        const newData = new pxt.sprite.TilemapData(\n            newTilemap, {\n                tileWidth: tileSize,\n                tiles: [project.getTransparency(tileSize)]\n            },\n            newLayers.data()\n        );\n        tilemap.data = newData;\n    }\n\n    generatePreviewURI(asset);\n    project.updateAsset(asset);\n\n}","import React from 'react';\nimport { AlertProps } from './Alert';\n\nimport \"../styles/AssetSideBar.css\";\nimport { AssetList } from './AssetList';\nimport { AssetDetails } from './AssetDetails';\n\ninterface AssetSidebarProps {\n    showAlert(alert: AlertProps): void;\n    activeTab: pxt.AssetType;\n    asset: pxt.Asset;\n    onAssetSelected: (asset: pxt.Asset) => void;\n}\n\nexport const AssetSidebar = (props: AssetSidebarProps) => {\n    const { showAlert, activeTab, asset, onAssetSelected } = props;\n    return <div className=\"asset-sidebar\">\n        <div className=\"asset-details-container\">\n            <AssetDetails asset={asset} showAlert={showAlert} onAssetSelected={onAssetSelected} />\n        </div>\n        <AssetList activeTab={activeTab} asset={asset} onAssetSelected={onAssetSelected} />\n    </div>\n}","import { AssetInfo, Asset } from \"./components/Asset\";\nimport { lzmaCompressAsync } from \"./lzma\";\nimport { JRes } from \"./share\";\nimport { escapeIdentifier, IMAGE_MIME_TYPE, browserDownloadUInt8Array, browserDownloadText, browserDownloadDataUri } from \"./util\";\nimport { imgEncodeJRESImage } from \"./images\";\nimport { AssetType, getProjectPalette, getTilemapProject } from \"./project\";\n\n\ninterface PXTHexFile {\n    meta: {\n        cloudId: \"pxt/arcade\";\n        targetVersions: any;\n        editor: \"tsprj\";\n        name: string;\n    };\n    source: string; // a mapping of filenames to file text that has been stringified\n}\n\nconst PROJECT_COMMENT = `/*\n * This project was created using arcade-sprite-pack. If you\n * want to publish this project to GitHub as a sprite pack, do\n * not add any code to this file! The code that is running in the\n * simulator can be edited by clicking on the file explorer to the\n * left and selecting \"test.ts\". Any code added to \"test.ts\" will\n * not be added to a project that imports this sprite pack as an\n * extension.\n *\n * If you don't wish to publish this project, you can use this project\n * as-is. Your sprites should show up in the sprite gallery. Make sure\n * you delete the code in \"test.ts\"!\n *\n *\n * To publish this project to GitHub:\n *   1. Rename this project to something descriptive\n *   2. Click the GitHub button in the bottom bar next to the save\n *      button (sign in to GitHub if prompted)\n *   3. Choose a name for your repository. This is the name that\n *      people will see when importing your project.\n *   4. Make sure \"public repository\" is selected in the dropdown\n *      if you want other people to be able to use your sprites\n *   5. Click \"go ahead\"\n *   6. If you are on a shared computer, make sure you sign out of\n *      GitHub!\n *\n *\n * To add a published project to an Arcade project:\n *   1. Inside the MakeCode editor, click \"Extensions\" under \"Advanced\"\n *      in the toolbox\n *   2. Inside the search box that appears, type your GitHub username\n *      followed by a \"/\" and the name of the repository. It should\n *      look something like this: username/repository\n *   3. Hit enter on your keyboard and click the card that appears\n *   4. The sprites should now show up in the gallery of the sprite\n *      editor (at the bottom)\n * */\n`;\n\nconst TEST_SCRIPT = `\nconst padding = 10;\nconst speed = 50;\ngame.onUpdate(function() {\n    for (const sprite of sprites.allOfKind(SpriteKind.Player)) {\n        if (sprite.vx > 0 && sprite.x >= screen.width - padding) {\n            sprite.x = screen.width - padding;\n            sprite.vx = 0;\n            sprite.vy = speed;\n        }\n        else if (sprite.vy > 0 && sprite.y >= screen.height - padding) {\n            sprite.y = screen.height - padding;\n            sprite.vx = -speed;\n            sprite.vy = 0;\n        }\n        else if (sprite.vx < 0 && sprite.x <= padding) {\n            sprite.x = padding;\n            sprite.vx = 0;\n            sprite.vy = -speed;\n        }\n        else if (sprite.vy < 0 && sprite.bottom <= 0) {\n            sprite.destroy();\n        }\n    }\n})\n\nlet index = 0;\ngame.onUpdateInterval(700, function() {\n    const asset = sprites.create(allImages[index], SpriteKind.Player);\n    asset.x = padding;\n    asset.y = padding;\n    asset.vx = speed;\n    asset.setFlag(SpriteFlag.Ghost, true)\n    index = (index + 1) % allImages.length;\n})\n\nlet line1 = sprites.create(img\\`0\\`, SpriteKind.Food)\nline1.say(\"PRESS A TO  \")\n\nlet line2 = sprites.create(img\\`0\\`, SpriteKind.Food)\nline2.say(\"CHANGE COLOR\")\nline2.top += 10\n\nlet bgColor = 0;\ncontroller.player1.onButtonEvent(ControllerButton.A, ControllerButtonEvent.Pressed, function() {\n    scene.setBackgroundColor(bgColor);\n    bgColor = (bgColor + 1) % 15\n})`;\n\nconst MAIN_BLOCKS = \"main.blocks\"\nconst ASSET_TS = \"assets.ts\";\nconst ASSET_JRES = \"assets.jres\"\nconst TEST_TS = \"test.ts\";\nconst MAIN_TS = \"main.ts\";\nconst PXT_JSON = \"pxt.json\";\nconst README_MD = \"README.md\";\n\nconst TILEMAP_JRES = \"tilemap.g.jres\";\nconst IMAGE_JRES = \"images.g.jres\";\nconst TILEMAP_G_TS = \"tilemap.g.ts\";\nconst IMAGE_G_TS = \"images.g.ts\";\n\nfunction createProjectBlobAsync(name: string) {\n    const config = {\n        \"name\": name,\n        \"dependencies\": {\n            \"device\": \"*\" // required for arcade\n        },\n        \"description\": \"An asset pack for MakeCode Arcade\",\n        \"files\": [\n            MAIN_BLOCKS,\n            MAIN_TS\n        ],\n        \"testFiles\": [\n            TEST_TS\n        ]\n    };\n\n\n\n    const files: {[index: string]: string} = {};\n\n    const project = getTilemapProject();\n\n    const tmjres = project.getProjectTilesetJRes();\n\n    if (Object.keys(tmjres).length > 1) {\n        const stringRes = JSON.stringify(tmjres, null, 4);\n        const ts = pxt.emitTilemapsFromJRes(tmjres);\n        files[TILEMAP_JRES] = stringRes;\n        files[TILEMAP_G_TS] = ts;\n        config.files.push(TILEMAP_JRES);\n        config.files.push(TILEMAP_G_TS);\n    }\n\n    const imgjres = project.getProjectAssetsJRes();\n\n    if (Object.keys(imgjres).length > 1) {\n        const stringRes = JSON.stringify(imgjres, null, 4);\n        const ts = pxt.emitProjectImages(imgjres);\n        files[IMAGE_JRES] = stringRes;\n        files[IMAGE_G_TS] = ts;\n        config.files.push(IMAGE_JRES);\n        config.files.push(IMAGE_G_TS);\n    }\n\n    files[PXT_JSON] = JSON.stringify(config, null, 4);\n    files[MAIN_TS] = PROJECT_COMMENT;\n    files[TEST_TS] = \"\";\n    files[README_MD] = \"\"\n    files[MAIN_BLOCKS] =`<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>`;\n\n    const out: PXTHexFile = {\n        meta: {\n            cloudId: \"pxt/arcade\",\n            targetVersions: {},\n            name: name,\n            editor: \"tsprj\"\n        },\n        source: JSON.stringify(files)\n    };\n\n    return lzmaCompressAsync(JSON.stringify(out));\n}\n\n\nexport async function downloadProjectAsync(name: string) {\n    const blob = await createProjectBlobAsync(name);\n    return browserDownloadUInt8Array(blob, name + \".mkcd\");\n}\n\n\nexport async function downloadScaledSprites(scaleFactor: number) {\n    const project = getTilemapProject();\n\n    const allBitmaps: pxt.sprite.Bitmap[] = [];\n\n    for (const asset of project.getAssets(AssetType.Image)) {\n        allBitmaps.push(pxt.sprite.Bitmap.fromData((asset as pxt.ProjectImage).bitmap));\n    }\n    for (const asset of project.getAssets(AssetType.Tile)) {\n        allBitmaps.push(pxt.sprite.Bitmap.fromData((asset as pxt.Tile).bitmap));\n    }\n    for (const asset of project.getAssets(AssetType.Animation)) {\n        allBitmaps.push(...(asset as pxt.Animation).frames.map(frame => pxt.sprite.Bitmap.fromData(frame)));\n    }\n\n    const renderCanvas: HTMLCanvasElement = document.createElement(\"canvas\");\n\n    const palette = getProjectPalette();\n\n    const output: string[] = [];\n    for (const bitmap of allBitmaps) {\n        renderCanvas.width = bitmap.width * scaleFactor;\n        renderCanvas.height = bitmap.height * scaleFactor;\n        const context = renderCanvas.getContext(\"2d\");\n\n        for (let x = 0; x < bitmap.width; x++) {\n            for (let y = 0; y < bitmap.height; y++) {\n                const pixel = bitmap.get(x, y);\n                if (pixel) {\n                    context!.fillStyle = palette[pixel];\n                    context!.fillRect(x * scaleFactor, y * scaleFactor, scaleFactor, scaleFactor);\n                }\n                else {\n                    context!.clearRect(x * scaleFactor, y * scaleFactor, scaleFactor, scaleFactor)\n                }\n            }\n        }\n\n        output.push(renderCanvas.toDataURL());\n    }\n\n    for (let i = 0; i < output.length; i++) {\n        browserDownloadDataUri(output[i], \"image\" + i + \".png\")\n    }\n}\n\n\n// function createProjectBlobAsyncOld(name: string, assetTS: string, assetJRES: string, testTS: string) {\n//     const config = JSON.stringify({\n//         \"name\": name,\n//         \"dependencies\": {\n//             \"device\": \"*\" // required for arcade\n//         },\n//         \"description\": \"An asset pack for MakeCode Arcade\",\n//         \"files\": [\n//             MAIN_BLOCKS,\n//             MAIN_TS,\n//             ASSET_JRES,\n//             ASSET_TS\n//         ],\n//         \"testFiles\": [\n//             TEST_TS\n//         ]\n//     }, null, 4);\n\n\n//     const files: {[index: string]: string} = {};\n//     files[PXT_JSON] = config;\n//     files[MAIN_TS] = PROJECT_COMMENT;\n//     files[TEST_TS] = testTS;\n//     files[ASSET_TS] = assetTS;\n//     files[ASSET_JRES] = assetJRES;\n//     files[README_MD] = \"\"\n//     files[MAIN_BLOCKS] =`<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>`;\n\n\n//     const project: PXTHexFile = {\n//         meta: {\n//             cloudId: \"pxt/arcade\",\n//             targetVersions: {},\n//             name: name,\n//             editor: \"tsprj\"\n//         },\n//         source: JSON.stringify(files)\n//     };\n\n//     return lzmaCompressAsync(JSON.stringify(project));\n// }\n\n// export async function downloadProjectAsync(name: string, assets: AssetInfo[]) {\n//     let assetTS = \"\";\n\n//     const assetJRES: {[index: string]: JRes | string} = {};\n//     const takenNames: {[index: string]: boolean} = {};\n\n//     const projectNamespace = escapeIdentifier(name) + \"Sprites\";\n//     const qualifiedNames: string[] = [];\n\n\n//     // @ts-ignore\n//     assetJRES[\"*\"] = {\n//         namespace: projectNamespace,\n//         mimeType: IMAGE_MIME_TYPE\n//     }\n\n//     for (const asset of assets) {\n//         const identifier = escapeName(asset.name);\n\n//         if (asset.jres.tilemapTile) {\n//             assetJRES[identifier] = {\n//                 id: identifier,\n//                 data: asset.jres.data,\n//                 tilemapTile: true,\n//                 mimeType: IMAGE_MIME_TYPE\n//             };\n//             assetTS += `    //% fixedInstance jres blockIdentity=images._tile\\n`\n//         }\n//         else {\n//             assetJRES[identifier] = asset.jres.data;\n//             assetTS += `    //% fixedInstance jres blockIdentity=images._image\\n`\n//         }\n\n//         assetTS += `    export const ${identifier} = image.ofBuffer(hex\\`\\`);\\n`\n//         qualifiedNames.push(projectNamespace + \".\" + identifier);\n//     }\n\n//     assetTS = `namespace ${projectNamespace} {\\n${assetTS}\\n}\\n`;\n\n//     const testTS = `const allImages = [${qualifiedNames.join(\",\")}]\\n${TEST_SCRIPT}`;\n//     const project = await createProjectBlobAsync(name, assetTS, JSON.stringify(assetJRES), testTS);\n//     return browserDownloadUInt8Array(project, name + \".mkcd\");\n\n\n\n//     function escapeName(name: string) {\n//         const escaped = escapeIdentifier(name);\n\n//         if (!takenNames[escaped]) {\n//             takenNames[escaped] = true;\n//             return escaped;\n//         }\n\n//         let index = 2;\n//         while (takenNames[escaped + index]) {\n//             index++;\n//         }\n\n//         takenNames[escaped + index] = true;\n//         return escaped + index;\n//     }\n// }\n\nexport async function downloadTypeScriptAsync(name: string, assets: AssetInfo[]) {\n    let assetTS = \"\";\n\n    let takenNames: {[index: string]: boolean} = {};\n\n    for (const asset of assets) {\n        assetTS += `const ${escapeName(asset.name)} = ${imgEncodeJRESImage(asset.jres)};\\n`\n    }\n\n    return browserDownloadText(assetTS, name + \".ts\");\n\n    function escapeName(name: string) {\n        const escaped = escapeIdentifier(name);\n\n        if (!takenNames[escaped]) {\n            takenNames[escaped] = true;\n            return escaped;\n        }\n\n        let index = 2;\n        while (takenNames[escaped + index]) {\n            index++;\n        }\n\n        takenNames[escaped + index] = true;\n        return escaped + index;\n    }\n}","import React from \"react\";\nimport { newTilemapProject } from \"../project\";\nimport { AlertProps } from \"./Alert\";\n\nimport '../styles/AssetActions.css';\nimport { downloadProjectAsync, downloadScaledSprites } from \"../export\";\nimport { importScriptAsync } from \"../import\";\n\n\ninterface AssetActionsProps {\n    showAlert(alert: AlertProps): void;\n}\n\nexport const AssetActions = (props: AssetActionsProps) => {\n    return <div className=\"asset-list-buttons\">\n    <div className=\"asset-button\" title=\"Clear all assets\" onClick={() => onDeleteButtonClick(props)}>\n        <i className=\"icon delete\"></i>\n    </div>\n    <div className=\"asset-button\" title=\"Import assets\" onClick={() => onImportButtonClick(props)}>\n        <i className=\"icon upload\"></i>\n    </div>\n    <div className=\"asset-button\" title=\"Export assets\" onClick={() => onExportButtonClick(props)}>\n        <i className=\"icon download\"></i>\n    </div>\n</div>\n}\n\nfunction onAddButtonClick() {\n\n}\n\nfunction onDeleteButtonClick(props: AssetActionsProps) {\n    const { showAlert } = props;\n    showAlert({\n        icon: \"exclamation triangle\",\n        title: \"WARNING\",\n        text: \"This will delete ALL assets in this project. You will not be able to undo this action.\",\n        options: [{\n                text: \"Delete All\",\n                style: {\n                    backgroundColor: \"#dc3f34\"\n                },\n                onClick: () => {\n                    newTilemapProject(true);\n                }\n            }]\n    }\n    );\n}\n\nfunction onImportButtonClick(props: AssetActionsProps) {\n    const { showAlert } = props;\n\n    showAlert({\n        icon: \"upload\",\n        type: \"import\",\n        title: \"Import Sprites\",\n        text: \"Paste a URL from MakeCode Arcade or drag and drop PNG files to import existing sprites.\",\n        options: [{\n                text: \"Add to project\",\n                onClick: (input) => {\n                    if (input) importScriptAsync(input)\n                }\n            },\n            {\n                text: \"Overwrite project\",\n                onClick: (input) => {\n                    if (input) {\n                        newTilemapProject(true);\n                        importScriptAsync(input)\n                    }\n                }\n            }]\n    });\n}\n\nfunction onExportButtonClick(props: AssetActionsProps) {\n    const { showAlert } = props;\n    showAlert({\n        icon: \"download\",\n        title: \"Export\",\n        text: \"Choose export method\",\n        options: [{\n                text: \"Export .mkcd file\",\n                onClick: (input) => {\n                    downloadProjectAsync(\"project\");\n                }\n            },\n            {\n                text: \"Export PNGs\",\n                onClick: (input) => {\n                    setTimeout(() => {\n                        showAlert({\n                            type: \"scale\",\n                            icon: \"download\",\n                            title: \"Export PNGs\",\n                            text: \"Enter scale factor\",\n                            options: [\n                                {\n                                    text: \"Export\",\n                                    onClick: (input) => {\n                                        if (input) downloadScaledSprites(parseInt(input));\n                                    }\n                                }]\n                        });\n                    }, 100)\n                }\n            }]\n    });\n}","import React from \"react\";\n\nimport \"../styles/AssetTabBar.css\";\n\nexport interface AssetTab {\n    type: pxt.AssetType;\n    name: string;\n    title: string;\n}\n\nexport interface AssetTabBarProps {\n    activeTab: pxt.AssetType;\n    options: AssetTab[];\n    onTabSelected(type: pxt.AssetType): void;\n}\n\nexport const AssetTabBar = (props: AssetTabBarProps) => {\n    const { options, onTabSelected, activeTab } = props;\n\n    return <div className=\"asset-tab-bar\">\n        { options.map(({ type, name, title }) => (\n            <div key={type} className={`asset-tab ${activeTab === type ? \"selected\" : \"\"} ${type}`} title={title} onClick={() => onTabSelected(type)}>\n                <span className=\"asset-tab-name\">{name}</span>\n            </div>\n            )\n        ) }\n    </div>\n}","import React from \"react\";\nimport { AssetType } from \"../project\";\nimport { AlertProps } from \"./Alert\";\nimport { AssetActions } from \"./AssetActions\";\nimport { AssetTab, AssetTabBar } from \"./AssetTabBar\";\n\nimport \"../styles/TopBar.css\";\n\n\nexport interface TopBarProps {\n    showAlert(alert: AlertProps): void;\n    onTabSelected(type: pxt.AssetType): void;\n    activeTab: pxt.AssetType;\n}\n\nexport const TopBar = (props: TopBarProps) => {\n    const { onTabSelected, activeTab, showAlert } = props;\n\n    const options: AssetTab[] = [\n        {\n            type: AssetType.Image,\n            name: \"Images\",\n            title: \"Images\"\n        },\n        {\n            type: AssetType.Animation,\n            name: \"Animations\",\n            title: \"Animations\"\n        },\n        {\n            type: AssetType.Tile,\n            name: \"Tiles\",\n            title: \"Tiles\"\n        },\n        {\n            type: AssetType.Tilemap,\n            name: \"Tilemaps\",\n            title: \"Tilemaps\"\n        }\n    ];\n\n    return <div className=\"asset-top-bar\">\n        <div className=\"asset-tab-bar-container\">\n            <AssetTabBar options={options} onTabSelected={onTabSelected} activeTab={activeTab} />\n        </div>\n        <div className=\"asset-actions-container\">\n            <AssetActions showAlert={showAlert}/>\n        </div>\n    </div>\n}","import React from 'react';\nimport { Alert, AlertProps } from './components/Alert';\nimport { AssetSidebar } from './components/AssetSidebar';\nimport { TopBar } from './components/TopBar';\nimport { AssetType, getTilemapProject } from './project';\nimport './styles/App.css';\nimport { generatePreviewURI } from './util';\n\ninterface AppState {\n    alert?: AlertProps;\n    asset: pxt.Asset;\n    activeTab: pxt.AssetType;\n    mostRecentAssets: {[index: string]: string};\n}\n\nclass App extends React.Component<{}, AppState> {\n    private iframe!: HTMLIFrameElement;\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            asset: this.getAssetForTab(AssetType.Image),\n            activeTab: AssetType.Image,\n            mostRecentAssets: {}\n        };\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"message\", msg => {\n            const data = msg.data;\n\n            switch (data.type) {\n                case \"ready\":\n                    this.openCurrentAsset();\n                    break;\n                case \"save-asset\":\n                    this.onAssetSave(data.asset);\n                    break;\n\n            }\n        });\n    }\n\n    postMessage = (data: any) => {\n        if (this.iframe && this.iframe.contentWindow) {\n            data[\"_fromVscode\"] = true; // fake _fromVscode for now\n            this.iframe.contentWindow.postMessage(data, \"*\");\n        }\n    }\n\n    onMouseEnter = () => {\n        this.iframe?.contentWindow?.focus();\n    }\n\n    showAlert = (alertProps: AlertProps) => {\n        this.setState({ alert: alertProps });\n    }\n\n    onTabSelected = (tab: pxt.AssetType) => {\n        if (tab === this.state.activeTab) return;\n\n        const asset = this.getAssetForTab(tab);\n        this.setState({ activeTab: tab, asset: asset! }, () => {\n            this.openCurrentAsset();\n        });\n\n    }\n\n    hideAlert = () => {\n        if (this.state.alert?.onClose) {\n            this.state.alert.onClose();\n        }\n        this.setState({ alert: undefined });\n    }\n\n    handleIframeRef = (iframe: HTMLIFrameElement) => {\n        this.iframe = iframe;\n    }\n\n    onAssetSelected = (asset: pxt.Asset) => {\n        if (asset === null) {\n            asset = this.getAssetForTab(this.state.activeTab);\n        }\n        this.setState({\n            asset: asset\n        }, () => this.openCurrentAsset());\n    }\n\n    render() {\n        const { alert, activeTab, asset } = this.state;\n        return (\n            <div className={`app ${activeTab}-active`}>\n                <TopBar showAlert={this.showAlert} onTabSelected={this.onTabSelected} activeTab={activeTab}/>\n                <div className=\"asset-editor-area\">\n                    <iframe id=\"editor\"\n                        ref={this.handleIframeRef}\n                        onMouseEnter={this.onMouseEnter}\n                        title=\"MakeCode Arcade sprite editor\"\n                        src=\"https://arcade.makecode.com/app/bc45f71fb939111c673a07163a1889739631a13d-5de495b635---asseteditor\" />\n                    <AssetSidebar showAlert={this.showAlert} asset={asset} activeTab={activeTab} onAssetSelected={this.onAssetSelected} />\n                </div>\n                { alert && <Alert {...alert} onClose={this.hideAlert} visible={true}/> }\n            </div>\n        );\n    }\n\n    protected openCurrentAsset() {\n        if (this.state.asset.type === AssetType.Tilemap) {\n            const tilemap = this.state.asset as pxt.ProjectTilemap;\n            const project = getTilemapProject();\n\n            const tileset = tilemap.data.tileset;\n\n            for (let i = 0; i < tileset.tiles.length; i++) {\n                const tile = tileset.tiles[i];\n                tileset.tiles[i] = project.resolveTile(tile.id);\n            }\n\n            for (const tile of project.getAssets(AssetType.Tile) as pxt.Tile[]) {\n                if (!tileset.tiles.some(t => t.id === tile.id) && tile.bitmap.width === tileset.tileWidth) {\n                    tileset.tiles.push(tile);\n                }\n            }\n        }\n        this.postMessage({\n            type: \"open-asset\",\n            asset: this.state.asset\n        });\n\n        this.setState({\n            mostRecentAssets: {\n                ...this.state.mostRecentAssets,\n                [this.state.asset.type]: this.state.asset.id\n            }\n        });\n    }\n\n    protected onAssetSave(asset: pxt.Asset) {\n        const project = getTilemapProject();\n        if (asset.type === AssetType.Tilemap) {\n            const tm = asset as pxt.ProjectTilemap\n\n            // After passing between iframe, we need to re-hydrate the classes\n            const oldData = tm.data;\n            const newTm = new pxt.sprite.Tilemap(oldData.tilemap.width, oldData.tilemap.height, 0, 0, (oldData.tilemap as any).buf);\n            tm.data = new pxt.sprite.TilemapData(newTm, oldData.tileset, oldData.layers);\n            tm.data.editedTiles = oldData.editedTiles;\n            tm.data.deletedTiles = oldData.deletedTiles;\n\n            for (let i = 0; i < tm.data.tileset.tiles.length; i++) {\n                const tile = tm.data.tileset.tiles[i];\n                const existing = project.lookupAsset(tile.type, tile.id);\n\n                if (!existing) {\n                    tm.data.tileset.tiles[i] = project.createNewTile(tile.bitmap, tile.id, tile.meta.displayName);\n                }\n                else {\n                    tile.internalID = existing.internalID;\n                }\n                generatePreviewURI(tm.data.tileset.tiles[i]);\n            }\n            pxt.sprite.updateTilemapReferencesFromResult(project, tm);\n\n            for (let i = 0; i < tm.data.tileset.tiles.length; i++) {\n                let tile = tm.data.tileset.tiles[i];\n                tile = project.lookupAsset(tile.type, tile.id)\n\n                tm.data.tileset.tiles[i] = tile;\n\n                generatePreviewURI(tile);\n                project.updateAsset(tile);\n            }\n        }\n        generatePreviewURI(asset);\n        getTilemapProject().updateAsset(asset);\n    }\n\n    protected getAssetForTab(tab: pxt.AssetType) {\n        const project = getTilemapProject();\n        if (this.state?.mostRecentAssets?.[tab]) {\n            const mostRecent = project.lookupAsset(tab, this.state.mostRecentAssets[tab]);\n\n            if (mostRecent) return mostRecent;\n        }\n        let asset: pxt.Asset;\n        switch (tab) {\n            case AssetType.Image:\n                asset = project.getAssets(AssetType.Image)[0] || project.createNewImage(16, 16);\n                break;\n            case AssetType.Tile:\n                asset = project.getAssets(AssetType.Tile)[0] || project.createNewTile(new pxt.sprite.Bitmap(16, 16).data());\n                break;\n            case AssetType.Animation:\n                asset = project.getAssets(AssetType.Animation)[0] || project.createNewAnimation(16, 16);\n                break;\n            case AssetType.Tilemap:\n                asset = project.getAssets(AssetType.Tilemap)[0];\n\n                if (!asset) {\n                    const [id, tilemap] = project.createNewTilemap(\"level\", 16, 16);\n                    asset = project.lookupAsset(AssetType.Tilemap, id);\n                }\n                break;\n        }\n\n        if (!asset!.meta.displayName) {\n            asset!.meta.displayName = pxt.getDefaultAssetDisplayName(tab);\n            asset = project.updateAsset(asset!);\n        }\n\n        return asset!;\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}